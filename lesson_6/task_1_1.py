"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те, где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это отговорки.
Примеров оптимизации мы перечислили много: переход с массивов на генераторы, numpy,
использование слотов, применение del, сериализация и т.д.
Это файл для первого скрипта
"""
from memory_profiler import profile
'''
Курс основ. Дз 1, задание 2. Использовали генератор, что позволило сократить размер потребляемой памяти
'''

# До
@profile()
def sum_list_1():
    """Вычисляет сумму чисел списка dataset, сумма цифр которых делится нацело на 7"""
    dataset = [i ** 3 for i in range(1, 1001, 2)]
    result = 0
    for number in dataset:
        sum_number = 0
        copy_num = number
        while number > 0:
            sum_number += (number % 10)
            number = number // 10
        if sum_number % 7 == 0:
            result += copy_num
    return result

sum_list_1()

# После
@profile()
def sum_list_2():
    """Вычисляет сумму чисел списка dataset, сумма цифр которых делится нацело на 7"""
    dataset = (i ** 3 for i in range(3, 100000, 2))
    result = 0
    for number in dataset:
        sum_number = 0
        copy_num = number
        while number > 0:
            sum_number += (number % 10)
            number = number // 10
        if sum_number % 7 == 0:
            result += copy_num
    return result

sum_list_2()


